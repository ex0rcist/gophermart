// Code generated by MockGen. DO NOT EDIT.
// Source: internal/http_backend/backend.go
//
// Generated by this command:
//
//      mockgen -source=internal/http_backend/backend.go
//

// Package mock_httpbackend is a generated GoMock package.
package mock_httpbackend

import (
        context "context"
        reflect "reflect"

        gomock "go.uber.org/mock/gomock"
)

// MockIHTTPBackend is a mock of IHTTPBackend interface.
type MockIHTTPBackend struct {
        ctrl     *gomock.Controller
        recorder *MockIHTTPBackendMockRecorder
}

// MockIHTTPBackendMockRecorder is the mock recorder for MockIHTTPBackend.
type MockIHTTPBackendMockRecorder struct {
        mock *MockIHTTPBackend
}

// NewMockIHTTPBackend creates a new mock instance.
func NewMockIHTTPBackend(ctrl *gomock.Controller) *MockIHTTPBackend {
        mock := &MockIHTTPBackend{ctrl: ctrl}
        mock.recorder = &MockIHTTPBackendMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHTTPBackend) EXPECT() *MockIHTTPBackendMockRecorder {
        return m.recorder
}

// Run mocks base method.
func (m *MockIHTTPBackend) Run() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Run")
        ret0, _ := ret[0].(error)
        return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIHTTPBackendMockRecorder) Run() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIHTTPBackend)(nil).Run))
}

// Shutdown mocks base method.
func (m *MockIHTTPBackend) Shutdown(ctx context.Context) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Shutdown", ctx)
        ret0, _ := ret[0].(error)
        return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockIHTTPBackendMockRecorder) Shutdown(ctx any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockIHTTPBackend)(nil).Shutdown), ctx)
}