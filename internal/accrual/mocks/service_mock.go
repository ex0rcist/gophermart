// Code generated by MockGen. DO NOT EDIT.
// Source: internal/accrual/service.go
//
// Generated by this command:
//
//      mockgen -source=internal/accrual/service.go
//

// Package mock_accrual is a generated GoMock package.
package mock_accrual

import (
        reflect "reflect"
        time "time"

        accrual "github.com/ex0rcist/gophermart/internal/accrual"
        gomock "go.uber.org/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
        ctrl     *gomock.Controller
        recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
        mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
        mock := &MockIService{ctrl: ctrl}
        mock.recorder = &MockIServiceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
        return m.recorder
}

// GetLockedUntil mocks base method.
func (m *MockIService) GetLockedUntil() time.Time {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetLockedUntil")
        ret0, _ := ret[0].(time.Time)
        return ret0
}

// GetLockedUntil indicates an expected call of GetLockedUntil.
func (mr *MockIServiceMockRecorder) GetLockedUntil() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockedUntil", reflect.TypeOf((*MockIService)(nil).GetLockedUntil))
}

// Push mocks base method.
func (m *MockIService) Push(t accrual.ITask) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "Push", t)
}

// Push indicates an expected call of Push.
func (mr *MockIServiceMockRecorder) Push(t any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockIService)(nil).Push), t)
}

// Run mocks base method.
func (m *MockIService) Run() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Run")
        ret0, _ := ret[0].(error)
        return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIServiceMockRecorder) Run() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIService)(nil).Run))
}

// SetLockedUntil mocks base method.
func (m *MockIService) SetLockedUntil(lockedUntil time.Time) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "SetLockedUntil", lockedUntil)
}

// SetLockedUntil indicates an expected call of SetLockedUntil.
func (mr *MockIServiceMockRecorder) SetLockedUntil(lockedUntil any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLockedUntil", reflect.TypeOf((*MockIService)(nil).SetLockedUntil), lockedUntil)
}