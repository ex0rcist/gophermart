// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/repository/user.go
//
// Generated by this command:
//
//      mockgen -source=internal/storage/repository/user.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
        context "context"
        reflect "reflect"

        domain "github.com/ex0rcist/gophermart/internal/domain"
        pgx "github.com/jackc/pgx/v5"
        decimal "github.com/shopspring/decimal"
        gomock "go.uber.org/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
        ctrl     *gomock.Controller
        recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
        mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
        mock := &MockIUserRepository{ctrl: ctrl}
        mock.recorder = &MockIUserRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
        return m.recorder
}

// UserCreate mocks base method.
func (m *MockIUserRepository) UserCreate(ctx context.Context, login, password string) (*domain.User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UserCreate", ctx, login, password)
        ret0, _ := ret[0].(*domain.User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockIUserRepositoryMockRecorder) UserCreate(ctx, login, password any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockIUserRepository)(nil).UserCreate), ctx, login, password)
}

// UserFindByLogin mocks base method.
func (m *MockIUserRepository) UserFindByLogin(ctx context.Context, login string) (*domain.User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UserFindByLogin", ctx, login)
        ret0, _ := ret[0].(*domain.User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// UserFindByLogin indicates an expected call of UserFindByLogin.
func (mr *MockIUserRepositoryMockRecorder) UserFindByLogin(ctx, login any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindByLogin", reflect.TypeOf((*MockIUserRepository)(nil).UserFindByLogin), ctx, login)
}

// UserGetBalance mocks base method.
func (m *MockIUserRepository) UserGetBalance(ctx context.Context, tx pgx.Tx, id domain.UserID) (*decimal.Decimal, *decimal.Decimal, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UserGetBalance", ctx, tx, id)
        ret0, _ := ret[0].(*decimal.Decimal)
        ret1, _ := ret[1].(*decimal.Decimal)
        ret2, _ := ret[2].(error)
        return ret0, ret1, ret2
}

// UserGetBalance indicates an expected call of UserGetBalance.
func (mr *MockIUserRepositoryMockRecorder) UserGetBalance(ctx, tx, id any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetBalance", reflect.TypeOf((*MockIUserRepository)(nil).UserGetBalance), ctx, tx, id)
}

// UserUpdateBalanceAndWithdrawals mocks base method.
func (m *MockIUserRepository) UserUpdateBalanceAndWithdrawals(ctx context.Context, tx pgx.Tx, id domain.UserID) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UserUpdateBalanceAndWithdrawals", ctx, tx, id)
        ret0, _ := ret[0].(error)
        return ret0
}

// UserUpdateBalanceAndWithdrawals indicates an expected call of UserUpdateBalanceAndWithdrawals.
func (mr *MockIUserRepositoryMockRecorder) UserUpdateBalanceAndWithdrawals(ctx, tx, id any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateBalanceAndWithdrawals", reflect.TypeOf((*MockIUserRepository)(nil).UserUpdateBalanceAndWithdrawals), ctx, tx, id)
}