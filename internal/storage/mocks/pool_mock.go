// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/pool.go
//
// Generated by this command:
//
//      mockgen -source=internal/storage/pool.go
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
        context "context"
        reflect "reflect"

        pgx "github.com/jackc/pgx/v5"
        pgconn "github.com/jackc/pgx/v5/pgconn"
        pgxpool "github.com/jackc/pgx/v5/pgxpool"
        gomock "go.uber.org/mock/gomock"
)

// MockIPGXPool is a mock of IPGXPool interface.
type MockIPGXPool struct {
        ctrl     *gomock.Controller
        recorder *MockIPGXPoolMockRecorder
}

// MockIPGXPoolMockRecorder is the mock recorder for MockIPGXPool.
type MockIPGXPoolMockRecorder struct {
        mock *MockIPGXPool
}

// NewMockIPGXPool creates a new mock instance.
func NewMockIPGXPool(ctrl *gomock.Controller) *MockIPGXPool {
        mock := &MockIPGXPool{ctrl: ctrl}
        mock.recorder = &MockIPGXPoolMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPGXPool) EXPECT() *MockIPGXPoolMockRecorder {
        return m.recorder
}

// Acquire mocks base method.
func (m *MockIPGXPool) Acquire(ctx context.Context) (*pgxpool.Conn, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Acquire", ctx)
        ret0, _ := ret[0].(*pgxpool.Conn)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockIPGXPoolMockRecorder) Acquire(ctx any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockIPGXPool)(nil).Acquire), ctx)
}

// Begin mocks base method.
func (m *MockIPGXPool) Begin(ctx context.Context) (pgx.Tx, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Begin", ctx)
        ret0, _ := ret[0].(pgx.Tx)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockIPGXPoolMockRecorder) Begin(ctx any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockIPGXPool)(nil).Begin), ctx)
}

// BeginTx mocks base method.
func (m *MockIPGXPool) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "BeginTx", ctx, txOptions)
        ret0, _ := ret[0].(pgx.Tx)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockIPGXPoolMockRecorder) BeginTx(ctx, txOptions any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockIPGXPool)(nil).BeginTx), ctx, txOptions)
}

// Close mocks base method.
func (m *MockIPGXPool) Close() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIPGXPoolMockRecorder) Close() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIPGXPool)(nil).Close))
}

// Exec mocks base method.
func (m *MockIPGXPool) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
        m.ctrl.T.Helper()
        varargs := []any{ctx, sql}
        for _, a := range arguments {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "Exec", varargs...)
        ret0, _ := ret[0].(pgconn.CommandTag)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockIPGXPoolMockRecorder) Exec(ctx, sql any, arguments ...any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]any{ctx, sql}, arguments...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockIPGXPool)(nil).Exec), varargs...)
}

// Ping mocks base method.
func (m *MockIPGXPool) Ping(ctx context.Context) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Ping", ctx)
        ret0, _ := ret[0].(error)
        return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIPGXPoolMockRecorder) Ping(ctx any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIPGXPool)(nil).Ping), ctx)
}

// Query mocks base method.
func (m *MockIPGXPool) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
        m.ctrl.T.Helper()
        varargs := []any{ctx, sql}
        for _, a := range args {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "Query", varargs...)
        ret0, _ := ret[0].(pgx.Rows)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockIPGXPoolMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]any{ctx, sql}, args...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIPGXPool)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockIPGXPool) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
        m.ctrl.T.Helper()
        varargs := []any{ctx, sql}
        for _, a := range args {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "QueryRow", varargs...)
        ret0, _ := ret[0].(pgx.Row)
        return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockIPGXPoolMockRecorder) QueryRow(ctx, sql any, args ...any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]any{ctx, sql}, args...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockIPGXPool)(nil).QueryRow), varargs...)
}

// SendBatch mocks base method.
func (m *MockIPGXPool) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "SendBatch", ctx, b)
        ret0, _ := ret[0].(pgx.BatchResults)
        return ret0
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockIPGXPoolMockRecorder) SendBatch(ctx, b any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockIPGXPool)(nil).SendBatch), ctx, b)
}