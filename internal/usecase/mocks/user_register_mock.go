// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/user_register.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/user_register.go -destination=internal/usecase/mocks/user_register_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/ex0rcist/gophermart/internal/domain"
	entities "github.com/ex0rcist/gophermart/internal/entities"
	usecase "github.com/ex0rcist/gophermart/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockIRegisterUsecase is a mock of IRegisterUsecase interface.
type MockIRegisterUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIRegisterUsecaseMockRecorder
}

// MockIRegisterUsecaseMockRecorder is the mock recorder for MockIRegisterUsecase.
type MockIRegisterUsecaseMockRecorder struct {
	mock *MockIRegisterUsecase
}

// NewMockIRegisterUsecase creates a new mock instance.
func NewMockIRegisterUsecase(ctrl *gomock.Controller) *MockIRegisterUsecase {
	mock := &MockIRegisterUsecase{ctrl: ctrl}
	mock.recorder = &MockIRegisterUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRegisterUsecase) EXPECT() *MockIRegisterUsecaseMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIRegisterUsecase) Call(ctx context.Context, form usecase.RegisterRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, form)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIRegisterUsecaseMockRecorder) Call(ctx, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIRegisterUsecase)(nil).Call), ctx, form)
}

// CreateAccessToken mocks base method.
func (m *MockIRegisterUsecase) CreateAccessToken(user *domain.User, secret entities.Secret, lifetime time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", user, secret, lifetime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockIRegisterUsecaseMockRecorder) CreateAccessToken(user, secret, lifetime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockIRegisterUsecase)(nil).CreateAccessToken), user, secret, lifetime)
}

// CreateUser mocks base method.
func (m *MockIRegisterUsecase) CreateUser(ctx context.Context, login, password string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, login, password)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIRegisterUsecaseMockRecorder) CreateUser(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIRegisterUsecase)(nil).CreateUser), ctx, login, password)
}

// GetUserByLogin mocks base method.
func (m *MockIRegisterUsecase) GetUserByLogin(ctx context.Context, form usecase.RegisterRequest) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, form)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockIRegisterUsecaseMockRecorder) GetUserByLogin(ctx, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockIRegisterUsecase)(nil).GetUserByLogin), ctx, form)
}
