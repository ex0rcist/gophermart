// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/user_withdraw_balance.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/user_withdraw_balance.go -destination=internal/usecase/mocks/user_withdraw_balance_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/ex0rcist/gophermart/internal/domain"
	usecase "github.com/ex0rcist/gophermart/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockIWithdrawBalanceUsecase is a mock of IWithdrawBalanceUsecase interface.
type MockIWithdrawBalanceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIWithdrawBalanceUsecaseMockRecorder
}

// MockIWithdrawBalanceUsecaseMockRecorder is the mock recorder for MockIWithdrawBalanceUsecase.
type MockIWithdrawBalanceUsecaseMockRecorder struct {
	mock *MockIWithdrawBalanceUsecase
}

// NewMockIWithdrawBalanceUsecase creates a new mock instance.
func NewMockIWithdrawBalanceUsecase(ctrl *gomock.Controller) *MockIWithdrawBalanceUsecase {
	mock := &MockIWithdrawBalanceUsecase{ctrl: ctrl}
	mock.recorder = &MockIWithdrawBalanceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWithdrawBalanceUsecase) EXPECT() *MockIWithdrawBalanceUsecaseMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIWithdrawBalanceUsecase) Call(ctx context.Context, user *domain.User, req usecase.WithdrawBalanceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, user, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockIWithdrawBalanceUsecaseMockRecorder) Call(ctx, user, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIWithdrawBalanceUsecase)(nil).Call), ctx, user, req)
}
