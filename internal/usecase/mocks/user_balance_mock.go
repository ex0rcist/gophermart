// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/user_balance.go
//
// Generated by this command:
//
//      mockgen -source=internal/usecase/user_balance.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
        context "context"
        reflect "reflect"

        domain "github.com/ex0rcist/gophermart/internal/domain"
        usecase "github.com/ex0rcist/gophermart/internal/usecase"
        gomock "go.uber.org/mock/gomock"
)

// MockIGetUserBalanceUsecase is a mock of IGetUserBalanceUsecase interface.
type MockIGetUserBalanceUsecase struct {
        ctrl     *gomock.Controller
        recorder *MockIGetUserBalanceUsecaseMockRecorder
}

// MockIGetUserBalanceUsecaseMockRecorder is the mock recorder for MockIGetUserBalanceUsecase.
type MockIGetUserBalanceUsecaseMockRecorder struct {
        mock *MockIGetUserBalanceUsecase
}

// NewMockIGetUserBalanceUsecase creates a new mock instance.
func NewMockIGetUserBalanceUsecase(ctrl *gomock.Controller) *MockIGetUserBalanceUsecase {
        mock := &MockIGetUserBalanceUsecase{ctrl: ctrl}
        mock.recorder = &MockIGetUserBalanceUsecaseMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetUserBalanceUsecase) EXPECT() *MockIGetUserBalanceUsecaseMockRecorder {
        return m.recorder
}

// Call mocks base method.
func (m *MockIGetUserBalanceUsecase) Call(ctx context.Context, user *domain.User) (*usecase.GetUserBalanceResult, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Call", ctx, user)
        ret0, _ := ret[0].(*usecase.GetUserBalanceResult)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIGetUserBalanceUsecaseMockRecorder) Call(ctx, user any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIGetUserBalanceUsecase)(nil).Call), ctx, user)
}