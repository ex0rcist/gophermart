// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/order_list.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/order_list.go -destination=internal/usecase/mocks/order_list_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/ex0rcist/gophermart/internal/domain"
	usecase "github.com/ex0rcist/gophermart/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockIOrderListUsecase is a mock of IOrderListUsecase interface.
type MockIOrderListUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderListUsecaseMockRecorder
}

// MockIOrderListUsecaseMockRecorder is the mock recorder for MockIOrderListUsecase.
type MockIOrderListUsecaseMockRecorder struct {
	mock *MockIOrderListUsecase
}

// NewMockIOrderListUsecase creates a new mock instance.
func NewMockIOrderListUsecase(ctrl *gomock.Controller) *MockIOrderListUsecase {
	mock := &MockIOrderListUsecase{ctrl: ctrl}
	mock.recorder = &MockIOrderListUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderListUsecase) EXPECT() *MockIOrderListUsecaseMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIOrderListUsecase) Call(ctx context.Context, user *domain.User) ([]*usecase.OrderListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, user)
	ret0, _ := ret[0].([]*usecase.OrderListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIOrderListUsecaseMockRecorder) Call(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIOrderListUsecase)(nil).Call), ctx, user)
}
