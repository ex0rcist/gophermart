// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/user_login.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/user_login.go -destination=internal/usecase/mocks/user_login_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/ex0rcist/gophermart/internal/domain"
	entities "github.com/ex0rcist/gophermart/internal/entities"
	usecase "github.com/ex0rcist/gophermart/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockILoginUsecase is a mock of ILoginUsecase interface.
type MockILoginUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockILoginUsecaseMockRecorder
}

// MockILoginUsecaseMockRecorder is the mock recorder for MockILoginUsecase.
type MockILoginUsecaseMockRecorder struct {
	mock *MockILoginUsecase
}

// NewMockILoginUsecase creates a new mock instance.
func NewMockILoginUsecase(ctrl *gomock.Controller) *MockILoginUsecase {
	mock := &MockILoginUsecase{ctrl: ctrl}
	mock.recorder = &MockILoginUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoginUsecase) EXPECT() *MockILoginUsecaseMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockILoginUsecase) Call(ctx context.Context, form usecase.LoginRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, form)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockILoginUsecaseMockRecorder) Call(ctx, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockILoginUsecase)(nil).Call), ctx, form)
}

// ComparePassword mocks base method.
func (m *MockILoginUsecase) ComparePassword(user *domain.User, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockILoginUsecaseMockRecorder) ComparePassword(user, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockILoginUsecase)(nil).ComparePassword), user, password)
}

// CreateAccessToken mocks base method.
func (m *MockILoginUsecase) CreateAccessToken(user *domain.User, secret entities.Secret, lifetime time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", user, secret, lifetime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockILoginUsecaseMockRecorder) CreateAccessToken(user, secret, lifetime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockILoginUsecase)(nil).CreateAccessToken), user, secret, lifetime)
}

// GetUserByLogin mocks base method.
func (m *MockILoginUsecase) GetUserByLogin(ctx context.Context, req usecase.LoginRequest) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, req)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockILoginUsecaseMockRecorder) GetUserByLogin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockILoginUsecase)(nil).GetUserByLogin), ctx, req)
}
