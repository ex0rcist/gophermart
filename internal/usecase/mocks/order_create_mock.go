// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/order_create.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/order_create.go -destination=internal/usecase/mocks/order_create_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/ex0rcist/gophermart/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockIOrderCreateUsecase is a mock of IOrderCreateUsecase interface.
type MockIOrderCreateUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderCreateUsecaseMockRecorder
}

// MockIOrderCreateUsecaseMockRecorder is the mock recorder for MockIOrderCreateUsecase.
type MockIOrderCreateUsecaseMockRecorder struct {
	mock *MockIOrderCreateUsecase
}

// NewMockIOrderCreateUsecase creates a new mock instance.
func NewMockIOrderCreateUsecase(ctrl *gomock.Controller) *MockIOrderCreateUsecase {
	mock := &MockIOrderCreateUsecase{ctrl: ctrl}
	mock.recorder = &MockIOrderCreateUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderCreateUsecase) EXPECT() *MockIOrderCreateUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIOrderCreateUsecase) Create(ctx context.Context, user *domain.User, number string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user, number)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIOrderCreateUsecaseMockRecorder) Create(ctx, user, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIOrderCreateUsecase)(nil).Create), ctx, user, number)
}

// OrderFindByNumber mocks base method.
func (m *MockIOrderCreateUsecase) OrderFindByNumber(ctx context.Context, number string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderFindByNumber", ctx, number)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderFindByNumber indicates an expected call of OrderFindByNumber.
func (mr *MockIOrderCreateUsecaseMockRecorder) OrderFindByNumber(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderFindByNumber", reflect.TypeOf((*MockIOrderCreateUsecase)(nil).OrderFindByNumber), ctx, number)
}
